www.cnblogs.com/alex3714/articles/6217453.html redis缓存数据库
#------------------------------------------------------------------------------------------------------------
基本命令:
redis-cli
info
select 6
keys *
查列表: LINDEX demo -1
查看长度: LLEN demo
#------------------------------------------------------------------------------------------------------------

1、string类型操作
set(name, value, ex=None, px=None, nx=False, xx=False)  在Redis中设置值，默认，不存在则创建，存在则修改
参数：
     ex，过期时间（秒）
     px，过期时间（毫秒）
     nx，如果设置为True，则只有name不存在时，当前set操作才执行
     xx，如果设置为True，则只有name存在时，岗前set操作才执行
setnx(name, value)	设置值，只有name不存在时，执行设置操作（添加）
setex(name, value, time) # 设置值，time，过期时间（数字秒 或 timedelta对象）
psetex(name, time_ms, value) 设置值，time，过期时间（数字秒 或 timedelta对象）
mset(*args, **kwargs)   批量设置值 mset(k1='v1', k2='v2') 或 mget({'k1': 'v1', 'k2': 'v2'})
get(name)		获取值
mget(keys, *args)       批量获取 如： mget('ylr', 'wupeiqi') 或 r.mget(['ylr', 'wupeiqi'])
getset(name, value)     设置新值并获取原来的值
getrange(key, start, end) 获取子序列（根据字节获取，非字符）
setbit(name, offset, value)	对name对应值的二进制表示的位进行操作
getbit(name, offset)		# 获取name对应的值的二进制表示中的某位的值 （0或1）
bitcount(key, start=None, end=None)	获取name对应的值的二进制表示中 1 的个数
strlen(name)	 	# 返回name对应值的字节长度（一个汉字3个字节）
append(key, value)	在redis name对应的值后面追加内容
decr(self, name, amount=1)自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。
incrbyfloat(self, name, amount=1.0) 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。
incr(self, name, amount=1) # 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。

#-------------------------------------------------------------------------------------------
set key value
set key value ex 时间  设置数据多少秒超时
set key value px 时间  设置数据多少毫秒超时
get key 
keys *
#-------------------------------------------------------------------------------------------
2、Hash操作
hash表现形式上有些像pyhton中的dict,可以存储一组关联性较强的数据 
hset(name, key, value) name对应的hash中设置一个键值对（不存在，则创建；否则，修改）
# 参数：
    # name，redis的name
    # key，name对应的hash中的key
    # value，name对应的hash中的value
 
# 注：
    # hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）
hmset(name, mapping) 在name对应的hash中批量设置键值对， name，redis的name # mapping，字典，如：{'k1':'v1', 'k2': 'v2'}
hget(name,key)   # 在name对应的hash中获取根据key获取value
hgetall(name)  获取name对应hash的所有键值

hlen(name)		# 获取name对应的hash中键值对的个数
hkeys(name)		# 获取name对应的hash中所有的key的值
hvals(name)		# 获取name对应的hash中所有的value的值
hexists(name, key)	# 检查name对应的hash是否存在当前传入的key
hdel(name,*keys)	# 将name对应的hash中指定key的键值对删除
hincrby(name, key, amount=1) 自增name对应的hash中的指定key的值，amount，自增数（整数）
hincrbyfloat(name, key, amount=1.0) 自增name对应的hash中的指定key的值，amount，自增数（浮点数）
hscan(name, cursor=0, match=None, count=None) 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆
#-------------------------------------------------------------------------------------------

hscan_iter(name, match=None, count=None) 
# 利用yield封装hscan创建生成器，实现分批去redis中获取数据
  
# 参数：
    # match，匹配指定key，默认None 表示所有的key
    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数
  
# 如：
    # for item in r.hscan_iter('xx'):
    #     print item
#-------------------------------------------------------------------------------------------

3、列表类型操作
Redis Blpop 命令 	移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
Redis Brpop 命令 	移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
Redis Brpoplpush 命令 	从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
Redis Lindex 命令 	通过索引获取列表中的元素
Redis Linsert 命令 	在列表的元素前或者后插入元素
Redis Llen 命令 	获取列表长度
Redis Lpop 命令 	移出并获取列表的第一个元素
Redis Lpush 命令 	将一个或多个值插入到列表头部
Redis Lpushx 命令 	将一个或多个值插入到已存在的列表头部
Redis Lrange 命令 	获取列表指定范围内的元素
Redis Lrem 命令 	移除列表元素
Redis Lset 命令 	通过索引设置列表元素的值
Redis Ltrim 命令 	对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。
Redis Rpop 命令 	移除并获取列表最后一个元素
Redis Rpoplpush 命令 	从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧
Redis Rpush 命令 	在列表中添加一个或多个值
Redis Rpushx 命令 	为已存在的列表添加值
#------------------------------------------------------------------------------------------------------------

4.set集合操作
#------------------------------------------------------------------------------------------------------------
